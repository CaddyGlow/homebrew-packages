name: Build Alpine Packages

on:
  workflow_dispatch:
    inputs:
      tool:
        description: 'Tool name (e.g., quickctx)'
        required: true
        type: string
      version:
        description: 'Version (e.g., 0.1.4)'
        required: true
        type: string
  repository_dispatch:
    types: [build-alpine]

permissions:
  contents: write
  actions: write

concurrency:
  group: "alpine-build"
  cancel-in-progress: false

jobs:
  build-alpine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - uses: actions/checkout@v4

      - name: Get tool info
        id: info
        run: |
          TOOL="${{ github.event.client_payload.tool || github.event.inputs.tool }}"
          VERSION="${{ github.event.client_payload.version || github.event.inputs.version }}"

          echo "TOOL=$TOOL" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          echo "Building Alpine package:"
          echo "  Tool: $TOOL"
          echo "  Version: $VERSION"
          echo "  Architecture: ${{ matrix.arch }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.arch == 'aarch64'

      - name: Build Alpine package in Docker
        run: |
          TOOL="${{ steps.info.outputs.TOOL }}"
          VERSION="${{ steps.info.outputs.VERSION }}"
          ARCH="${{ matrix.arch }}"

          # Determine Docker platform
          if [ "$ARCH" = "aarch64" ]; then
            PLATFORM="linux/arm64"
          else
            PLATFORM="linux/amd64"
          fi

          # Create build script
          cat > build.sh << 'BUILDSCRIPT'
          #!/bin/sh
          set -e

          # Install dependencies
          apk add --no-cache alpine-sdk sudo

          # Setup builder user
          adduser -D builder
          addgroup builder abuild
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

          # Generate signing key
          su builder -c "abuild-keygen -a -i -n"

          # Build package
          TOOL=$1
          su builder -c "
            mkdir -p ~/build
            cp /workspace/alpine/APKBUILD.$TOOL ~/build/APKBUILD
            cd ~/build
            abuild checksum
            abuild -r
          "

          # Copy built package to output
          mkdir -p /output
          find /home/builder/packages -name '*.apk' -exec cp {} /output/ \;
          cp /home/builder/.abuild/*.rsa.pub /output/signing-key.rsa.pub
          BUILDSCRIPT

          chmod +x build.sh

          # Run build in Alpine container
          docker run --rm \
            --platform $PLATFORM \
            -v "$(pwd):/workspace" \
            -v "$(pwd)/output-$ARCH:/output" \
            alpine:latest \
            /workspace/build.sh "$TOOL"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alpine-${{ matrix.arch }}-${{ steps.info.outputs.TOOL }}
          path: output-${{ matrix.arch }}/*.apk

  attach-to-release:
    needs: build-alpine
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get tool info
        id: info
        run: |
          TOOL="${{ github.event.client_payload.tool || github.event.inputs.tool }}"
          VERSION="${{ github.event.client_payload.version || github.event.inputs.version }}"

          echo "TOOL=$TOOL" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          # Create release tag
          RELEASE_TAG="alpine-packages-v$(date +%Y%m%d)"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: List packages
        run: |
          echo "Built packages:"
          find packages -name '*.apk' -exec ls -lh {} \;

      - name: Create or update release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TOOL="${{ steps.info.outputs.TOOL }}"
          VERSION="${{ steps.info.outputs.VERSION }}"
          RELEASE_TAG="${{ steps.info.outputs.RELEASE_TAG }}"

          # Check if release exists
          if gh release view "$RELEASE_TAG" 2>/dev/null; then
            echo "Release $RELEASE_TAG exists, will update it"
            RELEASE_EXISTS=true
          else
            echo "Creating new release $RELEASE_TAG"
            RELEASE_EXISTS=false
          fi

          # Create release if it doesn't exist
          if [ "$RELEASE_EXISTS" = "false" ]; then
            gh release create "$RELEASE_TAG" \
              --title "Alpine Packages $(date +%Y-%m-%d)" \
              --notes "Alpine Linux packages for CaddyGlow tools.

          ## Installation

          Download the appropriate .apk file for your architecture:

          \`\`\`bash
          # Download package
          wget https://github.com/CaddyGlow/homebrew-packages/releases/download/$RELEASE_TAG/$TOOL-$VERSION-r0.apk

          # Install (as root)
          apk add --allow-untrusted $TOOL-$VERSION-r0.apk
          \`\`\`

          ## Packages Updated

          - $TOOL v$VERSION"
          fi

          # Upload all .apk files to release
          find packages -name '*.apk' -exec gh release upload "$RELEASE_TAG" {} --clobber \;

          echo "Packages uploaded to release: $RELEASE_TAG"

      - name: Summary
        run: |
          TOOL="${{ steps.info.outputs.TOOL }}"
          VERSION="${{ steps.info.outputs.VERSION }}"
          RELEASE_TAG="${{ steps.info.outputs.RELEASE_TAG }}"

          echo "### Alpine Packages Built and Released" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tool:** $TOOL" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** [$RELEASE_TAG](https://github.com/CaddyGlow/homebrew-packages/releases/tag/$RELEASE_TAG)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Installation:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Download and install" >> $GITHUB_STEP_SUMMARY
          echo "wget https://github.com/CaddyGlow/homebrew-packages/releases/download/$RELEASE_TAG/$TOOL-$VERSION-r0.apk" >> $GITHUB_STEP_SUMMARY
          echo "apk add --allow-untrusted $TOOL-$VERSION-r0.apk" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
