name: Build Alpine Packages (Reusable)

on:
  workflow_call:
    inputs:
      tool:
        description: "Tool name (e.g., quickctx)"
        required: true
        type: string
      version:
        description: "Version without v prefix (e.g., 0.1.4)"
        required: true
        type: string
      repository:
        description: "Repository in format owner/repo (e.g., CaddyGlow/quickctx)"
        required: true
        type: string
      release_tag:
        description: "Release tag to upload to (default: v{version})"
        required: false
        type: string
        default: ""

permissions:
  contents: write

concurrency:
  group: "alpine-build-${{ inputs.tool }}-${{ inputs.version }}"
  cancel-in-progress: false

jobs:
  build-alpine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    outputs:
      release_tag: ${{ steps.set_release.outputs.RELEASE_TAG }}

    steps:
      - name: Checkout homebrew-packages for APKBUILD templates
        uses: actions/checkout@v4
        with:
          repository: CaddyGlow/homebrew-packages
          path: homebrew-packages

      - name: Checkout tool repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          path: tool-repo

      - name: Set release tag
        id: set_release
        run: |
          if [ -n "${{ inputs.release_tag }}" ]; then
            RELEASE_TAG="${{ inputs.release_tag }}"
          else
            RELEASE_TAG="v${{ inputs.version }}"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Using release tag: $RELEASE_TAG"

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3
        if: matrix.arch == 'aarch64'

      - name: Build Alpine package in Docker
        env:
          TOOL: ${{ inputs.tool }}
          VERSION: ${{ inputs.version }}
          REPO: ${{ inputs.repository }}
          ARCH: ${{ matrix.arch }}
        run: |
          set -euo pipefail
          echo "Building Alpine package:"
          echo "  Tool: $TOOL"
          echo "  Version: $VERSION"
          echo "  Repository: $REPO"
          echo "  Architecture: $ARCH"

          if [ "$ARCH" = "aarch64" ]; then
            PLATFORM="linux/arm64"
            TAR_ARCH="aarch64"
          else
            PLATFORM="linux/amd64"
            TAR_ARCH="x86_64"
          fi

          # Determine binaries from Homebrew formula if available
          if [ -f "homebrew-packages/Formula/$TOOL.rb" ]; then
            BINARIES=$(grep -oP 'bin\.install "\K[^"]+' "homebrew-packages/Formula/$TOOL.rb" 2>/dev/null | sort -u || echo "$TOOL")
          else
            BINARIES="$TOOL"
          fi
          echo "Binaries to package: $BINARIES"

          # create a build script that will run inside the container
          cat > build.sh <<'BUILDSCRIPT'
          #!/bin/sh
          set -eu

          TOOL="$1"
          ARCH="$2"
          WORKSPACE="/workspace"
          OUTPUT="/output"

          apk add --no-cache alpine-sdk sudo

          # Setup builder user and key (non-interactive)
          adduser -D builder
          addgroup builder abuild
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          mkdir -p /home/builder
          chown builder:builder /home/builder

          # generate key for abuild for the builder user (non-interactive)
          su builder -c "abuild-keygen -a -i -n" || true

          # Prepare build dir
          su builder -c '
            set -eux
            mkdir -p ~/build
            cp '"$WORKSPACE"'/APKBUILD ~/build/APKBUILD
            cd ~/build
            # abuild expects files in /home/builder, and abuild -r will fetch source and build
            abuild -r
          '

          # copy result
          mkdir -p "$OUTPUT"
          find /home/builder/packages -name "*.apk" -exec cp {} "$OUTPUT" \; || true
          BUILDSCRIPT
                    chmod +x build.sh

                    # If a pre-made APKBUILD exists in homebrew-packages use it, else generate.
                    if [ -f "homebrew-packages/alpine/APKBUILD.$TOOL" ]; then
                      cp "homebrew-packages/alpine/APKBUILD.$TOOL" APKBUILD
                    else
                      # Download tarball to compute checksum
                      TARBALL_URL="https://github.com/$REPO/releases/download/v$VERSION/$TOOL-$TAR_ARCH-unknown-linux-musl.tar.gz"
                      echo "Downloading $TARBALL_URL to calculate checksum..."
                      curl -fsSL "$TARBALL_URL" -o "/tmp/$TOOL-$TAR_ARCH.tar.gz"

                      CHECKSUM_ONLY="$(sha512sum "/tmp/$TOOL-$TAR_ARCH.tar.gz" | awk '{print $1}')"
                      echo "SHA512: $CHECKSUM_ONLY"

                      # We will set the local source filename to match what abuild will expect:
                      # use "$TOOL-$VERSION.tar.gz" locally but point to architecture-specific remote URL.
                      LOCAL_NAME="$TOOL-$VERSION.tar.gz"
                      REMOTE_URL="https://github.com/$REPO/releases/download/v$VERSION/$TOOL-$TAR_ARCH-unknown-linux-musl.tar.gz"

                      # Generate APKBUILD — note: pkgrel=1, sha512sums contains only the hash.
                      # Also produce real tab characters for package() using printf.
                      {
                        cat <<EOF
          # Contributor: CaddyGlow <caddyglow@pm.me>
          # Maintainer: CaddyGlow <caddyglow@pm.me>
          pkgname=$TOOL
          pkgver=$VERSION
          pkgrel=1
          pkgdesc="Tool from $REPO"
          url="https://github.com/$REPO"
          arch="$ARCH"
          license="MIT"
          options="!check"
          source="$LOCAL_NAME::$REMOTE_URL"
          sha512sums="$CHECKSUM_ONLY"

          builddir="\$srcdir"
          EOF

              printf 'package() {\n'
              for bin in $BINARIES; do
                # using a literal tab at start of line
                printf '\tinstall -Dm755 "%s" "$pkgdir/usr/bin/%s"\n' "\$builddir/$bin" "$bin"
              done
              printf '}\n'
            } > APKBUILD

            echo "Generated APKBUILD:"
            sed -n '1,200p' APKBUILD
          fi

          # Prepare output directory
          mkdir -p output-$ARCH

          # Run build in Alpine container
          docker run --rm \
            --platform $PLATFORM \
            -v "$(pwd)/APKBUILD:/workspace/APKBUILD:ro" \
            -v "$(pwd)/build.sh:/workspace/build.sh:ro" \
            -v "$(pwd)/output-$ARCH:/output" \
            alpine:latest \
            /workspace/build.sh "$TOOL" "$ARCH"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alpine-${{ matrix.arch }}-${{ inputs.tool }}
          path: output-${{ matrix.arch }}/*.apk

  attach-to-release:
    needs: build-alpine
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: packages

      - name: List packages
        run: |
          echo "Built packages:"
          find packages -name '*.apk' -exec ls -lh {} \;

      - name: Install GitHub CLI
        run: |
          # install gh so we can upload to the release
          type gh >/dev/null 2>&1 || {
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null &&
            sudo apt update && sudo apt install -y gh
          }

      - name: Upload to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TOOL="${{ inputs.tool }}"
          VERSION="${{ inputs.version }}"
          REPO="${{ inputs.repository }}"
          RELEASE_TAG="${{ needs.build-alpine.outputs.release_tag }}"

          echo "Uploading Alpine packages to $REPO release $RELEASE_TAG"

          # Authenticate gh using the token
          echo "$GH_TOKEN" | gh auth login --with-token

          # Upload all .apk files to the repo release (clobber existing)
          find packages -name '*.apk' -print0 | xargs -0 -I{} gh release upload "$RELEASE_TAG" "{}" --repo "$REPO" --clobber

          echo "✅ Alpine packages uploaded successfully to $REPO/releases/tag/$RELEASE_TAG"
